% 2D Elastic VTI, frequency-domain, spectral differential equation (matrix-free)
% Paper-ready figures only:
%   (1) Model (rho, Vp0, Vs0)
%   (2) ABL behaviour: Im(rho_eff) map + centerline profiles
%   (3) Computed fields: Re/Im of u_x and u_z
%   (4) GMRES convergence
%
% Unknowns: displacement u = [u_x, u_z]
% PDE: -omega^2 * rho_eff * u - div( sigma ) = f, with VTI stress-strain and e^{-i ω t}
% Derivatives via FFT; quadratic sponge via complex density; GMRES with isotropic FFT preconditioner
% Developer: Morten Jakobsen
% Date: 20 October 2025

clear; clc; close all; warning off

%% ----------------------- USER SETTINGS -----------------------------------
dx = 10; dz = 10;
Nx = 201; Nz = 201;                % odd -> center source
f_hz = 10.0;
omega = 2*pi*f_hz;
timeConvention = 'em1';            % 'em1' (e^{-i ω t}) or 'ep1' (e^{+i ω t})
sign_t = +1; if strcmpi(timeConvention,'ep1'), sign_t = -1; end

% Isotropic reference (preconditioner only)
rho_ref = 2500; Vp_ref = 3000; Vs_ref = 1500;

% 3-layer VTI (laterally invariant along x)
z1 = 500; z2 = 1200;
rho1=2200; Vp01=2800; Vs01=1600; eps1=0.0; del1=0.0; gam1=0.0;
rho2=2200; Vp02=2800; Vs02=1600; eps2=0.0; del2=0.0; gam2=0.0;
rho3=2200; Vp03=2800; Vs03=1600; eps3=0.0; del3=0.0; gam3=0.0;

% Source: vertical point force at center
pol = [0, 1];    % [px, pz]

% Sponge / ABL (complex density)
abs_thickness_wl  = 2.0;    % thickness in S-wavelengths
eta_max_factor    = 1.0;    % scales complex density amplitude
eps_rel           = 1e-6;   % tiny uniform complex density (stability)

% GMRES
restart = 60; tol = 1e-6; maxit = 300;

%% ---------------------------- GRID --------------------------------------
xax = (0:Nx-1)*dx;
zax = (0:Nz-1)*dz;
[X, Z] = ndgrid(xax, zax);
Lx = Nx*dx; Lz = Nz*dz;
N = Nx*Nz;
[KX, KZ] = build_k_grids(Nx, Nz, dx, dz);
KK2 = KX.^2 + KZ.^2;

%% ----------------------- BUILD 3-LAYER VTI MODEL ------------------------
M1z = (zax <= z1);
M2z = (zax > z1) & (zax <= z2);
M3z = (zax > z2);
M1  = ones(Nx,1) * double(M1z);
M2  = ones(Nx,1) * double(M2z);
M3  = ones(Nx,1) * double(M3z);

[c11_1,c33_1,c55_1,c13_1] = thomsen_to_stiffness(rho1,Vp01,Vs01,eps1,del1,gam1);
[c11_2,c33_2,c55_2,c13_2] = thomsen_to_stiffness(rho2,Vp02,Vs02,eps2,del2,gam2);
[c11_3,c33_3,c55_3,c13_3] = thomsen_to_stiffness(rho3,Vp03,Vs03,eps3,del3,gam3);

c11 = c11_1.*M1 + c11_2.*M2 + c11_3.*M3;
c33 = c33_1.*M1 + c33_2.*M2 + c33_3.*M3;
c55 = c55_1.*M1 + c55_2.*M2 + c55_3.*M3;
c13 = c13_1.*M1 + c13_2.*M2 + c13_3.*M3;
rho = rho1.*M1 + rho2.*M2 + rho3.*M3;

% Vertical phase velocities from stiffness (paper-friendly model view)
Vp0_map = sqrt(max(c33,0)./max(rho,eps));   % Vp0 (vertical)
Vs0_map = sqrt(max(c55,0)./max(rho,eps));   % Vs0 (vertical)

% S-wave wavelength for ABL thickness
Vs_min = min(Vs0_map(:));
lambda_s_min = Vs_min / max(f_hz, eps);

%% ------------------------------- SOURCE ---------------------------------
sx = ceil((Nx+1)/2);
sz = ceil((Nz+1)/2);
S = zeros(Nx, Nz); S(sx, sz) = 1;
fx = pol(1) * S;
fz = pol(2) * S;

%% ----------------------------- SPONGE/ABL -------------------------------
thickness_m = abs_thickness_wl * lambda_s_min;
[eta_profile, tau] = build_sponge_quadratic_with_t(Nx, Nz, Lx, Lz, thickness_m);  % tau in [0,1], eta_profile = tau.^2

% Complex density amplitude (real ≥ 0), used as i*sign_t*eta_rho
eta_rho = eta_max_factor * mean(rho(:)) * eta_profile + eps_rel * rho;  % kg/m^3
rho_eff = rho + 1i * sign_t * eta_rho;

%% ------------------------ PACK/UNPACK & OPERATORS -----------------------
pack   = @(u1,u2) [u1(:); u2(:)];
unpack = @(x) deal(reshape(x(1:N), Nx, Nz), reshape(x(N+1:2*N), Nx, Nz));

Afun = @(x) applyA_elastic_vti(x, Nx, Nz, KX, KZ, rho_eff, c11, c33, c55, c13, omega, pack, unpack);
b = pack(fx, fz);

%% -------------------------- PRECONDITIONER ------------------------------
rho0 = rho_ref;
mu0  = rho_ref * Vs_ref^2;
lambda0 = rho_ref * (Vp_ref^2 - 2*Vs_ref^2);
rho0_eff = rho0 + 1i * sign_t * mean(eta_rho(:));
M = @(r) applyMinv_isoFFT(r, Nx, Nz, KX, KZ, KK2, omega, rho0_eff, lambda0, mu0, pack, unpack);

%% -------------------------------- GMRES ---------------------------------
x0 = zeros(2*N,1);
[xsol, flag, relres, iter, resvec] = gmres(Afun, b, restart, tol, maxit, M, [], x0);
if numel(iter) == 2, total_iters = (iter(1)-1)*restart + iter(2); else, total_iters = iter; end

[u1, u2] = unpack(xsol);

%% ========================= PAPER FIGURES ONLY ===========================

% (1) MODEL: rho, Vp0, Vs0
figure('Name','Model (rho, Vp0, Vs0)','Color','w','Position',[60 520 1260 360]);
tiledlayout(1,3,'TileSpacing','compact','Padding','compact');

nexttile;
imagesc(xax, zax, rho.'); axis image xy; colorbar;
title('\rho (kg/m^3)'); xlabel('x (m)'); ylabel('z (m)'); draw_layer_lines(z1, z2, Lx);

nexttile;
imagesc(xax, zax, Vp0_map.'); axis image xy; colorbar;
title('V_{p0} (m/s)'); xlabel('x (m)'); ylabel('z (m)'); draw_layer_lines(z1, z2, Lx);

nexttile;
imagesc(xax, zax, Vs0_map.'); axis image xy; colorbar;
title('V_{s0} (m/s)'); xlabel('x (m)'); ylabel('z (m)'); draw_layer_lines(z1, z2, Lx);

% (2) ABL BEHAVIOUR: Im(rho_eff) map + centerline profiles
ix = ceil((Nx+1)/2);  iz = ceil((Nz+1)/2);
figure('Name','ABL behaviour: Im(rho_{eff})','Color','w','Position',[60 60 1260 360]);
tiledlayout(1,2,'TileSpacing','compact','Padding','compact');

nexttile;
imagesc(xax, zax, imag(rho_eff).'); axis image xy; colorbar;
title('Im(\rho_{eff}) = sign_t \cdot \eta_\rho (kg/m^3)'); xlabel('x (m)'); ylabel('z (m)');
draw_layer_lines(z1, z2, Lx);

nexttile; hold on; grid on;
plot(zax, tau(ix,:), 'k-', 'LineWidth',1.2);
plot(zax, eta_profile(ix,:), 'b--', 'LineWidth',1.2);
plot(zax, imag(rho_eff(ix,:)), 'r-', 'LineWidth',1.4);
xlabel('z (m)'); ylabel('value');
title('Centerline at x = L_x/2');
legend('\tau','\tau^2','Im(\rho_{eff})','Location','northwest'); hold off;

% (3) COMPUTED FIELDS: Re/Im of u_x, u_z (2x2)
clim_ux = symmetric_clim(u1);
clim_uz = symmetric_clim(u2);
figure('Name','Computed fields (Re/Im)','Color','w','Position',[1360 60 1260 540]);
tiledlayout(2,2,'TileSpacing','compact','Padding','compact');

nexttile;
imagesc(xax, zax, real(u1).'); axis image xy; colorbar; caxis(clim_ux);
title('Re(u_x)'); xlabel('x (m)'); ylabel('z (m)'); draw_layer_lines(z1, z2, Lx);

nexttile;
imagesc(xax, zax, imag(u1).'); axis image xy; colorbar; caxis(clim_ux);
title('Im(u_x)'); xlabel('x (m)'); ylabel('z (m)'); draw_layer_lines(z1, z2, Lx);

nexttile;
imagesc(xax, zax, real(u2).'); axis image xy; colorbar; caxis(clim_uz);
title('Re(u_z)'); xlabel('x (m)'); ylabel('z (m)'); draw_layer_lines(z1, z2, Lx);

nexttile;
imagesc(xax, zax, imag(u2).'); axis image xy; colorbar; caxis(clim_uz);
title('Im(u_z)'); xlabel('x (m)'); ylabel('z (m)'); draw_layer_lines(z1, z2, Lx);

% (4) GMRES CONVERGENCE
figure('Name','GMRES Convergence','Color','w','Position',[1360 640 520 360]);
k = 0:numel(resvec)-1;
semilogy(k, resvec/max(resvec(1),eps), 'k.-','LineWidth',1.2,'MarkerSize',10); grid on; hold on
yline(tol,'r--','Tolerance'); hold off
xlabel('Iteration'); ylabel('||r_k|| / ||r_0||');
title(sprintf('GMRES: flag=%d, relres=%.2e, iters=%d (restart=%d)', flag, relres, total_iters, restart));

%% ============================== FUNCTIONS ===============================
function y = applyA_elastic_vti(x, Nx, Nz, KX, KZ, rho_eff, c11, c33, c55, c13, omega, pack, unpack)
    [u1, u2] = unpack(x);
    U1k = fft2(u1); U2k = fft2(u2);
    du1dx = ifft2(1i*KX .* U1k); du1dz = ifft2(1i*KZ .* U1k);
    du2dx = ifft2(1i*KX .* U2k); du2dz = ifft2(1i*KZ .* U2k);
    e_xx = du1dx; e_zz = du2dz; g_xz = du2dx + du1dz;
    s_xx = c11 .* e_xx + c13 .* e_zz;
    s_zz = c13 .* e_xx + c33 .* e_zz;
    s_xz = c55 .* g_xz;
    Sxxk = fft2(s_xx); Szzk = fft2(s_zz); Sxzk = fft2(s_xz);
    div1 = ifft2(1i*KX .* Sxxk + 1i*KZ .* Sxzk);
    div2 = ifft2(1i*KX .* Sxzk + 1i*KZ .* Szzk);
    y1 = - (omega^2) * rho_eff .* u1 - div1;
    y2 = - (omega^2) * rho_eff .* u2 - div2;
    y = pack(y1, y2);
end

function z = applyMinv_isoFFT(r, Nx, Nz, KX, KZ, KK2, omega, rho0_eff, lambda0, mu0, pack, unpack)
% A(k) = -ω^2 ρ0 I + μ0 |k|^2 I + (λ0+μ0) k k^T; inv = (1/a)I - (b/(a(a+b k^2))) kk^T
    [r1, r2] = unpack(r);
    R1 = fft2(r1); R2 = fft2(r2);
    kx = KX; kz = KZ; k2 = KK2;
    a = - (omega^2) * rho0_eff + mu0 * k2;
    b = (lambda0 + mu0);
    tiny = (1e-14)*(1+1i);
    a_safe = a; a_safe(abs(a_safe) < 1e-14) = a_safe(abs(a_safe) < 1e-14) + tiny;
    Rdot = kx .* R1 + kz .* R2;
    denom = a_safe .* (a_safe + b * k2);
    denom(abs(denom) < 1e-14) = denom(abs(denom) < 1e-14) + tiny;
    coef = b ./ denom;
    Z1_hat = (R1 ./ a_safe) - coef .* kx .* Rdot;
    Z2_hat = (R2 ./ a_safe) - coef .* kz .* Rdot;
    z = pack(ifft2(Z1_hat), ifft2(Z2_hat));
end

function [KX, KZ] = build_k_grids(Nx, Nz, dx, dz)
    kx_vec = (2*pi/(Nx*dx)) * [0:ceil(Nx/2)-1, -floor(Nx/2):-1];
    kz_vec = (2*pi/(Nz*dz)) * [0:ceil(Nz/2)-1, -floor(Nz/2):-1];
    [KX, KZ] = ndgrid(kx_vec, kz_vec);
end

function [eta, tau] = build_sponge_quadratic_with_t(Nx, Nz, Lx, Lz, thickness_m)
% tau: boundary ramp (0 in interior, 1 at boundary over thickness_m)
% eta: quadratic sponge profile = tau.^2
    x = (0:Nx-1) * (Lx/Nx);
    z = (0:Nz-1) * (Lz/Nz);
    [Xg, Zg] = ndgrid(x, z);
    d_left = Xg; d_right = Lx - Xg; d_top = Zg; d_bottom = Lz - Zg;
    dmin = min(min(d_left, d_right), min(d_top, d_bottom));
    tau = max(0, min(1, (thickness_m - dmin) / max(thickness_m, eps)));
    eta = tau.^2;
end

function [c11,c33,c55,c13] = thomsen_to_stiffness(rho,Vp0,Vs0,epsilon,delta,~)
% Thomsen (VTI) to stiffness: c11,c33,c55,c13 (Voigt, engineering shear)
% A=c11, C=c33, L=c55, F=c13; delta = ((F+L)^2 - (C-L)^2)/(2*C*(C-L))
    A = rho*Vp0^2*(1 + 2*epsilon);
    C = rho*Vp0^2;
    L = rho*Vs0^2;
    CL = C - L;
    F = -L + sqrt(max(CL.*(CL + 2*C*delta), 0));
    c11 = A; c33 = C; c55 = L; c13 = F;
end

function draw_layer_lines(z1, z2, Lx)
    hold on
    plot([0 Lx],[z1 z1],'w--','LineWidth',1.0);
    plot([0 Lx],[z2 z2],'w--','LineWidth',1.0);
end

function clim = symmetric_clim(F)
    L = max([abs(real(F(:))); abs(imag(F(:)))]);
    if L == 0, L = 1; end
    clim = [-L, L];
end
